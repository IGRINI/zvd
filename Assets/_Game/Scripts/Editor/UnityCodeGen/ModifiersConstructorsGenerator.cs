using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Game.Entities.Modifiers;
using UnityCodeGen;

namespace Game.Editor.UnityCodeGen
{
    [Generator]
    public class ModifiersConstructorsGenerator : ICodeGenerator
    {
        private const string OutputDirectory = "Assets/_Game/Scripts/Entities/Modifiers/";
        
        public void Execute(GeneratorContext context)
        {
            var modifierTypes = GetAllModifierTypes();

            var generatedCode = GenerateConstructorsCode(modifierTypes);

            context.AddCode("Modifiers.Generated.cs", generatedCode);
            
            context.OverrideFolderPath(OutputDirectory);
        } 

        private string GenerateConstructorsCode(List<Type> modifierTypes)
        {
            var groupedByNamespace = modifierTypes.GroupBy(t => t.Namespace);

            var code = "// <auto-generated/>\n\n";

            foreach (var group in groupedByNamespace)
            {
                code += $"namespace {group.Key}\n{{\n";

                foreach (var type in group)
                {
                    code += $@"
    public partial class {type.Name}
    {{
        public {type.Name}() {{ }}
    }}
";
                }

                code += "\n}\n";
            }

            return code;
        }

        public static List<Type> GetAllModifierTypes()
        {
            var modifierBaseType = typeof(Modifier);
            var assembly = Assembly.GetAssembly(modifierBaseType);

            var modifierTypes = assembly.GetTypes()
                .Where(t => t.IsClass && !t.IsAbstract && t.IsSubclassOf(modifierBaseType))
                .ToList();

            return modifierTypes;
        }
    }
}